import express from "express";
import { Pool } from "pg";
import dotenv from "dotenv";

// 환경변수 로드
dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// 미들웨어
app.use(express.json());

// PostgreSQL 연결 풀 설정
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 5000,
});

// 로깅 함수
const log = (level: string, message: string, meta?: any) => {
  const timestamp = new Date().toISOString();
  console.log(
    `[${timestamp}] ${level}: ${message}`,
    meta ? JSON.stringify(meta) : ""
  );
};

// 데이터베이스 연결 테스트
const testConnection = async () => {
  try {
    const client = await pool.connect();
    const result = await client.query(
      "SELECT NOW() as current_time, version() as version"
    );
    log("INFO", "Database connection successful", {
      currentTime: result.rows[0].current_time,
      version: result.rows[0].version.split(" ")[0],
    });
    client.release();
    return true;
  } catch (error) {
    log("ERROR", "Database connection failed", error);
    return false;
  }
};

// 라우트들
app.get("/", (req, res) => {
  res.json({
    success: true,
    message: "SocialSpace Backend API",
    version: "1.0.0",
    timestamp: new Date().toISOString(),
  });
});

app.get("/health", async (req, res) => {
  try {
    const client = await pool.connect();
    await client.query("SELECT 1");
    client.release();

    res.json({
      success: true,
      status: "healthy",
      database: "connected",
      uptime: Math.floor(process.uptime()),
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    res.status(503).json({
      success: false,
      status: "unhealthy",
      database: "disconnected",
      error: error instanceof Error ? error.message : "Unknown error",
      timestamp: new Date().toISOString(),
    });
  }
});

app.get("/api/test-db", async (req, res) => {
  try {
    const client = await pool.connect();

    const tableCheck = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'users'
      ) as exists;
    `);

    const dbInfo = await client.query(`
      SELECT 
        current_database() as database_name,
        current_user as current_user,
        version() as version
    `);

    client.release();

    res.json({
      success: true,
      data: {
        database: {
          name: dbInfo.rows[0].database_name,
          user: dbInfo.rows[0].current_user,
          version: dbInfo.rows[0].version.split(" ")[0],
        },
        tables: {
          usersExists: tableCheck.rows[0].exists,
        },
      },
      message: "Database test completed successfully",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: "Database query failed",
      details: error instanceof Error ? error.message : "Unknown error",
      timestamp: new Date().toISOString(),
    });
  }
});

// 에러 핸들링
app.use(
  (
    err: Error,
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) => {
    log("ERROR", "Server error", err);
    res.status(500).json({
      success: false,
      error: "Internal server error",
      timestamp: new Date().toISOString(),
    });
  }
);

// 서버 시작
const startServer = async () => {
  try {
    // 데이터베이스 연결 테스트
    const dbConnected = await testConnection();

    // 서버 시작
    app.listen(port, () => {
      log("INFO", `🚀 Server running on port ${port}`, {
        url: `http://localhost:${port}`,
        database: dbConnected ? "connected" : "disconnected",
      });
    });

    // Graceful shutdown
    process.on("SIGINT", async () => {
      log("INFO", "🛑 Shutting down server...");
      await pool.end();
      log("INFO", "✅ Database connections closed");
      process.exit(0);
    });
  } catch (error) {
    log("ERROR", "Failed to start server", error);
    process.exit(1);
  }
};

startServer();

export { pool };
